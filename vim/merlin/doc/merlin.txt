*merlin.txt*	For Vim version 7.3 	Last change: 2013 March 30

                                Merlin ~

                Context sensitive completion for OCaml. ~

==============================================================================
COMMANDS                                                     *merlin-commands*

:SourcePath [dir]                                                *:SourcePath*

When dir is given adds, for the current session, the directory to the list of
directories where merlin looks for ml[i] files.

If no argument is given, it will list those directories.

:BuildPath [dir]                                                  *:BuildPath*

Same as |:SourcePath| but for cmi files.

:Use package [, package]*                                               *:Use*

Loads findlib packages (with completion) by adjusting buildpath to find files
from packages.

Tab completion on packages name is provided.

:Locate                                                               *Locate*

When called with no arguments tries to jump at the definition of the identifier
under the cursor.

When called with one argument tries to jump at the definition of the given
identifier, using the environment available at the cursor position.

:ML[I]                                                                   *:ML*

Quick switch to a source (resp. interface) file.
For instance, given moduleA.ml and moduleB.mli in source path, use: >
    :ML ModuleA
    :MLI ModuleB
<

:TypeOf [expr]                                                       *:TypeOf*

If given an expression, returns its type.
Otherwise, highlights the expression under the cursor and prints its type.
Use in conjunction with |:GrowEnclosing| and |:ShrinkEnclosing|.

Bound to <LocalLeader>t by default in normal mode.

:TypeOfSel                                                        *:TypeOfSel*

In visual mode, returns the type of the selected expression.

Bound to <LocalLeader>t by default in visual mode.

:GrowEnclosing                                                *:GrowEnclosing*

When |:TypeEnclosing| has been called, select the smallest expression
containing the previously highlighted expression.

:ShrinkEnclosing                                            *:ShrinkEnclosing*

When |:GrowEnclosing| has been called, revert to the previously selected
expression. (i.e. the largest expression, centered around the position where
|:TypeEnclosing| was called, which is contained in the currently highlighted
expression).

["r] :YankLatestType                                         *:YankLatestType*

Copy the latest shown type into register `"r`, or `""` if unspecified.

:ToggleTypeHistory                                        *:ToggleTypeHistory*

Reveals or hides a buffer containing a trace of all computed types.
See |merlin_type_history_height| and |merlin_type_history_auto_open|.

:Occurrences                                                    *:Occurrences*

List all occurrences of identifier under cursor in current buffer.
See |merlin_display_occurrence_list|.

:Rename <ident>                                                      *:Rename*

Rename all occurrences of identifier under cursor to <ident>.

==============================================================================
OPTIONS                                                       *merlin-options*


                                                    *'merlin_ignore_warnings'*
Default: false.
If you are using syntastic and don't want warnings notified, set the following
variable to {"true"} >
  let g:merlin_ignore_warnings = "false"
<

                                                         *merlin_highlighting*

The |:TypeEnclosing| commands highlights the expression under the cursor, the
related match group is {EnclosingExpr}. You can customize the highlighting
with the |:highlight| command, e.g. >
    hi EnclosingExpr ctermbg=17 guibg=LightGreen
<

                                                    *'merlin_move_to_project'*

Default: false.
If set to true, merlin will automatically change local directory of an ocaml
buffer to the root of the ".merlin" file. >
  let g:merlin_move_to_project = "true"
<
                                             *'merlin_display_occurrence_list'*

Default: true.
If set to true, merlin automatically displays the list of occurrences in a
separate window after a :Occurrences command. >
  let g:merlin_display_occurrence_list = 0
<

                                                  *'merlin_display_error_list'*

Default: true.
If set to true, merlin automatically displays the list of errors in a
separate window after a :ErrorCheck command. >
  let g:merlin_display_error_list = 0
<

                                                    *'merlin_close_error_list'*

Default: true.
If set to true, merlin automatically closes the list of errors if no error
was found after a :ErrorCheck command. >
  let g:merlin_close_error_list = 0
<
                                                 *'merlin_type_history_height'*

Default: 5.
The default height of the type history window.  If set to zero, merlin never
records any types in the history buffer. >
  let g:merlin_type_history_height = 0
<
                                              *'merlin_type_history_auto_open'*

Default: 5.
The maximum number of type lines to print in the statusbar before opening the
type history window.  If set to a very large number, merlin will never open
the type history window automatically. >
  let g:merlin_type_history_auto_open = 9999
<

==============================================================================
EXTRAS                                                         *merlin-extras*

Syntastic ~

To use merlin with syntastic set the following option: >
    let g:syntastic_ocaml_checkers=['merlin']
<

Neocomplcache ~

Integration with [neocomplcache](https://github.com/Shougo/neocomplcache)
for automatic completion can be enabled with: >

    if !exists('g:neocomplcache_force_omni_patterns')
      let g:neocomplcache_force_omni_patterns = {}
    endif
    let g:neocomplcache_force_omni_patterns.ocaml = '[^. *\t]\.\w*\|\h\w*|#'
<

Supertab ~

People using Supertab can do: >
    au FileType ocaml call SuperTabSetDefaultCompletionType("<c-x><c-o>")
<

As suggested in the Supertab documentation.

Contact us ~

If you have any comment, question or bug to report, you can contact us through
github : https://github.com/def-lkb/merlin/issues

 vim:tw=78:et:ft=help:norl:
